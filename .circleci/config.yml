version: 2.1

filter-not-main: &filter-not-main
  filters:
    branches:
      ignore:
        - main
        - /^dependabot/(?!docker/).*/
        - /^hotfix\/.+/

filter-main: &filter-main
  filters:
    branches:
      only:
        - main
        - /^hotfix\/.+/

filter-release: &filter-release
  filters:
    tags:
      only: /^release-202[\d-]+/
    branches:
      ignore: /.*/

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  terraform: circleci/terraform@3.2.1
  cloudfoundry: circleci/cloudfoundry@1.0
  cypress: cypress-io/cypress@1.27.0
  node: circleci/node@5
  ruby: circleci/ruby@2
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4
  tariff: trade-tariff/trade-tariff-ci-orb@0

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.5.5
    resource_class: small
    working_directory: "/tmp/terraform"
    environment:
      TF_INPUT: 0
      TF_IN_AUTOMATION: 1

commands:
  cf-deploy-docker:
    parameters:
      docker_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string

    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>

      - tariff/deploy-dark-app:
          aws_access_key_id: "$AWS_ACCESS_KEY_ID"
          aws_secret_access_key: "$AWS_SECRET_ACCESS_KEY"
          cf_app: tariff-duty-calculator
          docker_image: tariff-dutycalculator
          docker_tag: << parameters.docker_tag >>
          ecr_repo: "$ECR_REPO"
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

      - run:
          name: Map dark routes
          command: |
            cf map-route \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              london.cloudapps.digital \
              -n "$CF_APP-<< parameters.environment_key >>-dark"

            cf map-route \
              "$CF_APP-<< parameters.environment_key >>-dark" \
                << parameters.app_domain_prefix >>.trade-tariff.service.gov.uk \
                --path "/duty-calculator"

            cf add-network-policy \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              "$CF_BACKEND_APP_XI-<< parameters.environment_key >>" \
              --protocol tcp \
              --port 8080

            cf add-network-policy \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              "$CF_BACKEND_APP_UK-<< parameters.environment_key >>" \
              --protocol tcp \
              --port 8080

      - tariff/test-dark-app:
          cf_app: tariff-duty-calculator
          environment_key: << parameters.environment_key >>
          healthcheck_path: "/healthcheckz"

      - tariff/pivot-dark-app:
          app_domain_prefix: << parameters.app_domain_prefix >>
          cf_app: tariff-duty-calculator
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

jobs:
  write-docker-tag:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "docker_tag = \"$(git rev-parse --short HEAD)\"" >> terraform/config_<< parameters.environment >>.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - terraform/

  fmt-validate-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/fmt:
          path: terraform/
      - terraform/validate:
          path: terraform/

  plan-terraform:
    executor: terraform
    environment:
      TF_CLI_ARGS: "-lock=false"
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/plan:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars

  apply-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/apply:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars
          lock-timeout: 5m

  ruby-checks:
    docker:
      - image: cimg/ruby:3.2.2-node
    steps:
      - checkout
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
      - run:
          name: GOV linter
          command: bundle exec rake lint:scss
      - run:
          name: Brakeman
          # See https://github.com/presidentbeef/brakeman/issues/1664
          command: bundle exec brakeman -o brakeman_results.html
      - store_artifacts:
          path: brakeman_results.html

  build:
    environment:
      IMAGE_NAME: tariff-dutycalculator
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  test:
    docker:
      - image: cimg/ruby:3.2.2-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          COVERAGE: 1
          NODE_OPTIONS: --openssl-legacy-provider
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      - ruby/rspec-test
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  deploy-dev:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - cf-deploy-docker:
          docker_tag: dev-$CIRCLE_SHA1
          space: "development"
          environment_key: "dev"
          app_domain_prefix: "dev"
      - tariff/sentry-release:
          environment: development

  deploy-main-to-staging:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "staging"
    steps:
      - queue/until_front_of_line:
          time: "10"
          dont-quit: true
      - cf-deploy-docker:
          docker_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
      - tariff/sentry-release:
          environment: staging

  deploy-release-to-staging:
    docker:
      - image: cimg/ruby:3.2.2
    steps:
      - cf-deploy-docker:
          docker_tag: $CIRCLE_TAG
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"

  deploy-production:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "production"
    steps:
      - cf-deploy-docker:
          docker_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          app_domain_prefix: "www"
      - tariff/sentry-release:
          environment: production
      - tariff/notify-production-release:
          app-name: Duty Calculator
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

workflows:
  version: 2

  deploy-to-development:
    jobs:
      - ruby-checks:
          <<: *filter-not-main

      - test:
          context: trade-tariff
          <<: *filter-not-main

      - write-docker-tag:
          name: write-docker-tag-dev
          environment: development
          <<: *filter-not-main
          requires:
            - ruby-checks
            - test

      - fmt-validate-terraform:
          name: fmt-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          <<: *filter-not-main

      - plan-terraform:
          name: plan-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - write-docker-tag-dev
            - fmt-terraform-dev
          <<: *filter-not-main

      - build:
          name: build-dev
          context: trade-tariff
          dev-build: true
          requires:
            - test
          <<: *filter-not-main

      - tariff/build-and-push:
          name: build-and-push-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          image_name: tariff-duty-calculator
          ssm_parameter: "/development/DUTY_CALCULATOR_ECR_URL"
          <<: *filter-not-main

      - deploy-dev:
          context: trade-tariff
          requires:
            - test
            - ruby-checks
            - build-dev
          <<: *filter-not-main

      - apply-terraform:
          name: apply-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - test
            - plan-terraform-dev
            - build-and-push-dev
          <<: *filter-not-main

      - tariff/smoketests:
          name: smoketest-dev
          context: trade-tariff
          url: https://dev.trade-tariff.service.gov.uk
          yarn_run: dev-tariff-duty-calculator-smoketests
          requires:
            - deploy-dev
          <<: *filter-not-main

  deploy-to-staging:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-staging
          environment: staging

      - plan-terraform:
          name: plan-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
          <<: *filter-not-main

      - build:
          name: build-live
          context: trade-tariff
          <<: *filter-main

      - tariff/build-and-push:
          name: build-and-push-live
          context: trade-tariff-terraform-aws-staging
          environment: staging
          image_name: tariff-duty-calculator
          ssm_parameter: "/staging/DUTY_CALCULATOR_ECR_URL"
          <<: *filter-main

      - apply-terraform:
          name: apply-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
            - plan-terraform-staging
            - build-and-push-live
          <<: *filter-main

      - deploy-main-to-staging:
          context: trade-tariff
          requires:
            - build-live
          <<: *filter-main

      - tariff/smoketests:
          context: trade-tariff
          url: https://staging.trade-tariff.service.gov.uk
          yarn_run: staging-tariff-duty-calculator-smoketests
          requires:
            - deploy-main-to-staging
          <<: *filter-main

  deploy-to-production:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-prod
          environment: production

      - plan-terraform:
          name: plan-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod
          <<: *filter-not-main

      - promote-to-production?:
          type: approval
          <<: *filter-main

      - tariff/create-production-release:
          context: trade-tariff
          image-name: tariff-dutycalculator
          requires:
            - promote-to-production?
          <<: *filter-main

      - deploy-production:
          context: trade-tariff
          <<: *filter-release

      - write-docker-tag:
          name: write-docker-tag-prod-release
          environment: production
          <<: *filter-release

      - apply-terraform:
          name: apply-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod-release
          <<: *filter-release
