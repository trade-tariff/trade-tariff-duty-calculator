---
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  cloudfoundry: circleci/cloudfoundry@1.0
  cypress: cypress-io/cypress@1.27.0
  node: circleci/node@2
  ruby: circleci/ruby@1.4.0
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4

commands:
  cf_deploy_docker:
    parameters:
      dev-release:
        default: false
        type: boolean
      space:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string
    steps:
      - checkout
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.2.0&source=github-rel'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "$CF_APP-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export DOCKER_IMAGE=tariff-dutycalculator
            export DOCKER_TAG=<<# parameters.dev-release >>dev-<</ parameters.dev-release >>${CIRCLE_SHA1}

            # Push as "dark" instance
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push  "$CF_APP-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"

            # Map dark route
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>-dark"
            # Enable routing from this service to the backend applications which are private
            cf add-network-policy "$CF_APP-<< parameters.environment_key >>-dark" "$CF_BACKEND_APP_XI-<< parameters.environment_key >>" --protocol tcp --port 8080
            cf add-network-policy "$CF_APP-<< parameters.environment_key >>-dark" "$CF_BACKEND_APP_UK-<< parameters.environment_key >>" --protocol tcp --port 8080
      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$CF_APP-<< parameters.environment_key >>-dark.london.cloudapps.digital/duty-calculator/ping`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "$CF_APP-<< parameters.environment_key >>-dark" --recent
              cf delete -f  "$CF_APP-<< parameters.environment_key >>-dark"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>"
            # TODO: Update when we remove referring service from the path
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" "<< parameters.app_domain_prefix >>".trade-tariff.service.gov.uk --path "/duty-calculator"

            # Stop sending traffic to previous version
            cf unmap-route  "$CF_APP-<< parameters.environment_key >>" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>"
            cf unmap-route  "$CF_APP-<< parameters.environment_key >>" "<< parameters.app_domain_prefix >>".trade-tariff.service.gov.uk --path "/duty-calculator"

            # stop previous version
            cf stop "$CF_APP-<< parameters.environment_key >>"

            # delete previous version
            cf delete "$CF_APP-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "$CF_APP-<< parameters.environment_key >>-dark" "$CF_APP-<< parameters.environment_key >>"
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  smoketest:
    parameters:
      url:
        type: string
    steps:
      - run:
          name: "Checkout tests repo"
          command: git clone --depth=1 "https://github.com/trade-tariff/trade-tariff-testing/"
      - run:
          name: "Check environment being tested"
          environment:
            CYPRESS_BASE_URL: '<< parameters.url >>'
          command: 'echo "Testing: ${CYPRESS_BASE_URL}"'
      - restore_cache:
          keys:
            - v2-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
      - run:
          name: "Install NPM packages"
          command: 'cd trade-tariff-testing && yarn install'
      - save_cache:
          key: v2-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
          paths:
            - trade-tariff-testing/node_modules
            - /root/.cache/Cypress
      - run:
          name: "Cypress Smoke tests"
          environment:
            CYPRESS_BASE_URL: '<< parameters.url >>'
          command: 'cd trade-tariff-testing && yarn run cypress run --spec "cypress/integration/DutyCalculator/dcShared/dcSmokeTestCI.spec.js"'

  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

jobs:
  smoketest_dev:
    docker:
      - image: 'cypress/base:16.5.0'
    steps:
      - smoketest:
          url: https://dev.trade-tariff.service.gov.uk

  smoketest_staging:
    docker:
      - image: 'cypress/base:16.5.0'
    steps:
      - smoketest:
          url: https://staging.trade-tariff.service.gov.uk

  checking:
    docker:
      - image: 'cimg/ruby:3.1.0-node'
    steps:
      - checkout
      - run: 
          command: gem install bundler:2.2.18 --no-document
          name: Bring bundler up-to-date
      - ruby/install-deps
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
      - run:
          name: GOV linter
          command: bundle exec rake lint:scss
      - run:
          name: Brakeman
          command:  bundle exec brakeman -o brakeman_results.html
      - store_artifacts:
          path: brakeman_results.html

  build:
    environment:
      IMAGE_NAME: tariff-dutycalculator
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:3.1.0-node
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - ruby/install-deps
      - node/install-packages:
          cache-key: yarn.lock
          pkg-manager: yarn
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  test:
    docker:
      - image: cimg/ruby:3.1.0-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          COVERAGE: 1
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - ruby/rspec-test
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  cypress:
    docker:
      - image: 'cypress/base:latest'
    steps:
      - run:
          name: "Checkout tests repo"
          command: git clone "https://github.com/trade-tariff/trade-tariff-testing/"
      - run:
          name: "Cypress (dcSmokeTestCI)"
          command: 'cd trade-tariff-testing && npm install &&  npx cypress run --spec "/*/**/DutyCalculator/dcShared/dcSmokeTestCI.spec.js"'

  deploy_dev:
    docker:
      - image: cimg/ruby:3.1.0
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: false
          dont-quit: true
      - cf_deploy_docker:
          dev-release: true
          space: "development"
          environment_key: "dev"
          app_domain_prefix: "dev"
      - sentry-release

  deploy_staging:
    docker:
      - image: cimg/ruby:3.1.0
    environment:
      SENTRY_ENVIRONMENT: "staging"
    steps:
      - queue/until_front_of_line:
          time: '10'
          dont-quit: true
      - cf_deploy_docker:
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
      - sentry-release

  deploy_production:
    docker:
      - image: cimg/ruby:3.1.0
    environment:
      SENTRY_ENVIRONMENT: "production"
    steps:
      - queue/until_front_of_line:
          time: '10'
          dont-quit: true
      - cf_deploy_docker:
          space: "production"
          environment_key: "production"
          app_domain_prefix: "www"
      - sentry-release

workflows:
  version: 2
  build_and_test:
    jobs:
      - checking
      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
          requires:
            - test
      - deploy_dev:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
          requires:
            - build_dev
      - smoketest_dev:
          name: smoketest_dev
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
          requires:
            - deploy_dev
      - build:
          name: build_live
          context: trade-tariff
          filters:
            branches:
              only:
                - main
      - deploy_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - build_live
      - smoketest_staging:
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_staging
      - cypress:
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_staging
      - hold_production:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_staging
      - deploy_production:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - hold_production
